// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace DevTrack.Infrastructure.Templates.Emails.ProjectInvitation
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\#Training\Devskill\#Team Project\New3\aspnetb7_team1\src\DevTrack\DevTrack.Infrastructure\Templates\Emails\ProjectInvitation\ProjectInvitation.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class ProjectInvitation : ProjectInvitationBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title></title>\r\n    <meta http-equiv=\"Con" +
                    "tent-Type\" content=\"text/html; charset=utf-8\" />\r\n    <meta name=\"viewport\" cont" +
                    "ent=\"width=device-width, initial-scale=1\">\r\n    <meta http-equiv=\"X-UA-Compatibl" +
                    "e\" content=\"IE=edge\" />\r\n    <style type=\"text/css\">\r\n        /* FONTS */\r\n     " +
                    "  @media screen {\r\n           @font-face {\r\n                font-family: \'Lato\';" +
                    "\r\n                font-style: normal;\r\n                font-weight: 400;\r\n      " +
                    "          src: local(\'Lato Regular\'), local(\'Lato-Regular\'), url(https://fonts.g" +
                    "static.com/s/lato/v11/qIIYRU-oROkIk8vfvxw6QvesZW2xOQ-xsNqO47m55DA.woff) format(\'" +
                    "woff\');\r\n            }\r\n\r\n           @font-face {\r\n                font-family: " +
                    "\'Lato\';\r\n                font-style: normal;\r\n                font-weight: 700;\r" +
                    "\n                src: local(\'Lato Bold\'), local(\'Lato-Bold\'), url(https://fonts." +
                    "gstatic.com/s/lato/v11/qdgUG4U09HnJwhYI-uK18wLUuEpTyoUstqEm5AMlJo4.woff) format(" +
                    "\'woff\');\r\n            }\r\n\r\n           @font-face {\r\n                font-family:" +
                    " \'Lato\';\r\n                font-style: italic;\r\n                font-weight: 400;" +
                    "\r\n                src: local(\'Lato Italic\'), local(\'Lato-Italic\'), url(https://f" +
                    "onts.gstatic.com/s/lato/v11/RYyZNoeFgb0l7W3Vu1aSWOvvDin1pK8aKteLpeZ5c0A.woff) fo" +
                    "rmat(\'woff\');\r\n            }\r\n\r\n           @font-face {\r\n                font-fa" +
                    "mily: \'Lato\';\r\n                font-style: italic;\r\n                font-weight:" +
                    " 700;\r\n                src: local(\'Lato Bold Italic\'), local(\'Lato-BoldItalic\')," +
                    " url(https://fonts.gstatic.com/s/lato/v11/HkF_qI1x_noxlxhrhMQYELO3LdcAZYWl9Si6vv" +
                    "xL-qU.woff) format(\'woff\');\r\n            }\r\n        }\r\n\r\n        /* CLIENT-SPECI" +
                    "FIC STYLES */\r\n        body, table, td, a {\r\n            -webkit-text-size-adjus" +
                    "t: 100%;\r\n            -ms-text-size-adjust: 100%;\r\n        }\r\n\r\n        table, t" +
                    "d {\r\n            mso-table-lspace: 0pt;\r\n            mso-table-rspace: 0pt;\r\n   " +
                    "     }\r\n\r\n        img {\r\n            -ms-interpolation-mode: bicubic;\r\n        }" +
                    "\r\n\r\n        /* RESET STYLES */\r\n        img {\r\n            border: 0;\r\n         " +
                    "   height: auto;\r\n            line-height: 100%;\r\n            outline: none;\r\n  " +
                    "          text-decoration: none;\r\n        }\r\n\r\n        table {\r\n            bord" +
                    "er-collapse: collapse !important;\r\n        }\r\n\r\n        body {\r\n            heig" +
                    "ht: 100% !important;\r\n            margin: 0 !important;\r\n            padding: 0 " +
                    "!important;\r\n            width: 100% !important;\r\n        }\r\n\r\n        /* iOS BL" +
                    "UE LINKS */\r\n        a[x-apple-data-detectors] {\r\n            color: inherit !im" +
                    "portant;\r\n            text-decoration: none !important;\r\n            font-size: " +
                    "inherit !important;\r\n            font-family: inherit !important;\r\n            f" +
                    "ont-weight: inherit !important;\r\n            line-height: inherit !important;\r\n " +
                    "       }\r\n\r\n        /* MOBILE STYLES */\r\n       @media screen and (max-width:600" +
                    "px) {\r\n            h1 {\r\n                font-size: 32px !important;\r\n          " +
                    "      line-height: 32px !important;\r\n            }\r\n        }\r\n\r\n        /* ANDR" +
                    "OID CENTER FIX */\r\n        div[style*=\"margin: 16px 0;\"] {\r\n            margin: " +
                    "0 !important;\r\n        }\r\n    </style>\r\n</head>\r\n<body style=\"background-color: " +
                    "#e6e6e6; margin: 0 !important; padding: 0 !important;\">\r\n\r\n    <!-- HIDDEN PREHE" +
                    "ADER TEXT -->\r\n    <div style=\"display: none; font-size: 1px; color: #fefefe; li" +
                    "ne-height: 1px; font-family: \'Lato\', Helvetica, Arial, sans-serif; max-height: 0" +
                    "px; max-width: 0px; opacity: 0; overflow: hidden;\">\r\n        We\'re thrilled to h" +
                    "ave you here! Get ready to dive into your new account.\r\n    </div>\r\n\r\n    <table" +
                    " border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\">\r\n        <!-- LOGO -->" +
                    "\r\n        <tr>\r\n            <td bgcolor=\"#539be2\" align=\"center\">\r\n             " +
                    "   <!--[if (gte mso 9)|(IE)]>\r\n                <table align=\"center\" border=\"0\" " +
                    "cellspacing=\"0\" cellpadding=\"0\" width=\"600\">\r\n                <tr>\r\n            " +
                    "    <td align=\"center\" valign=\"top\" width=\"600\">\r\n                <![endif]-->\r\n" +
                    "                <table border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" s" +
                    "tyle=\"max-width: 600px;\">\r\n                    <tr>\r\n                        <td" +
                    " align=\"center\" valign=\"top\" style=\"padding: 40px 10px 40px 10px;\">\r\n           " +
                    "                 <h1 style=\"color:#ffffff\">DevTrack</h1>\r\n                      " +
                    "  </td>\r\n                    </tr>\r\n                </table>\r\n                <!" +
                    "--[if (gte mso 9)|(IE)]>\r\n                </td>\r\n                </tr>\r\n        " +
                    "        </table>\r\n                <![endif]-->\r\n            </td>\r\n        </tr>" +
                    "\r\n        <!-- HERO -->\r\n        <tr>\r\n            <td bgcolor=\"#539be2\" align=\"" +
                    "center\" style=\"padding: 0px 10px 0px 10px;\">\r\n                <!--[if (gte mso 9" +
                    ")|(IE)]>\r\n                <table align=\"center\" border=\"0\" cellspacing=\"0\" cellp" +
                    "adding=\"0\" width=\"600\">\r\n                <tr>\r\n                <td align=\"center" +
                    "\" valign=\"top\" width=\"600\">\r\n                <![endif]-->\r\n                <tabl" +
                    "e border=\"0\" cellpadding=\"0\" cellspacing=\"0\" width=\"100%\" style=\"max-width: 600p" +
                    "x;\">\r\n                    <tr>\r\n                        <td bgcolor=\"#ffffff\" al" +
                    "ign=\"center\" valign=\"top\" style=\"padding: 40px 20px 20px 20px; border-radius: 4p" +
                    "x 4px 0px 0px; color: #111111; font-family: \'Lato\', Helvetica, Arial, sans-serif" +
                    "; font-size: 48px; font-weight: 400; letter-spacing: 4px; line-height: 48px;\">\r\n" +
                    "                            <h1 style=\"font-size: 48px; font-weight: 400; margin" +
                    ": 0;\">Hello !</h1>\r\n                        </td>\r\n                    </tr>\r\n  " +
                    "              </table>\r\n                <!--[if (gte mso 9)|(IE)]>\r\n            " +
                    "    </td>\r\n                </tr>\r\n                </table>\r\n                <![e" +
                    "ndif]-->\r\n            </td>\r\n        </tr>\r\n        <!-- COPY BLOCK -->\r\n       " +
                    " <tr>\r\n            <td bgcolor=\"#e6e6e6\" align=\"center\" style=\"padding: 0px 10px" +
                    " 0px 10px;\">\r\n                <!--[if (gte mso 9)|(IE)]>\r\n                <table" +
                    " align=\"center\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"600\">\r\n       " +
                    "         <tr>\r\n                <td align=\"center\" valign=\"top\" width=\"600\">\r\n   " +
                    "             <![endif]-->\r\n                <table border=\"0\" cellpadding=\"0\" cel" +
                    "lspacing=\"0\" width=\"100%\" style=\"max-width: 600px;\">\r\n                    <!-- C" +
                    "OPY -->\r\n                    <tr>\r\n                        <td bgcolor=\"#ffffff\"" +
                    " align=\"left\" style=\"padding: 20px 30px 40px 30px; color: #666666; font-family: " +
                    "\'Lato\', Helvetica, Arial, sans-serif; font-size: 18px; font-weight: 400; line-he" +
                    "ight: 25px;\">\r\n                            <p>\r\n                                " +
                    "You\'re invited to join project. Just press the button below.\r\n                  " +
                    "          </p>\r\n\r\n                            <br />\r\n\r\n                        " +
                    "    <table width=\"100%\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n           " +
                    "                     <tr>\r\n                                    <td bgcolor=\"#fff" +
                    "fff\" align=\"center\" style=\"padding: 20px 30px 60px 30px;\">\r\n                    " +
                    "                    <table border=\"0\" cellspacing=\"0\" cellpadding=\"0\">\r\n        " +
                    "                                    <tr>\r\n                                      " +
                    "          <td align=\"center\" style=\"border-radius: 3px;\" bgcolor=\"#539be2\">\r\n   " +
                    "                                                 <a href=\"");
            
            #line 181 "D:\#Training\Devskill\#Team Project\New3\aspnetb7_team1\src\DevTrack\DevTrack.Infrastructure\Templates\Emails\ProjectInvitation\ProjectInvitation.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ProjectLink));
            
            #line default
            #line hidden
            this.Write(">\" target=\"_blank\" style=\"font-size: 20px; font-family: Helvetica, Arial, sans-se" +
                    "rif; color: #ffffff; text-decoration: none; color: #ffffff; text-decoration: non" +
                    "e; padding: 15px 25px; border-radius: 2px; border: 1px solid #539be2; display: i" +
                    "nline-block;\">\r\n                                                         Project" +
                    " Invitation Link\r\n                                                    </a>\r\n    " +
                    "                                            </td>\r\n                             " +
                    "               </tr>\r\n                                        </table>\r\n        " +
                    "                            </td>\r\n                                </tr>\r\n      " +
                    "                      </table>\r\n\r\n                            <br />\r\n\r\n        " +
                    "                    <p>\r\n                                If you have any questio" +
                    "ns, just email us at info@devskill.com — we\'re always happy to help out.\r\n      " +
                    "                      </p>\r\n\r\n                            <br />\r\n\r\n            " +
                    "                <p>\r\n                                The DevTrack Team\r\n        " +
                    "                    </p>\r\n                        </td>\r\n                    </t" +
                    "r>\r\n                </table>\r\n                <!--[if (gte mso 9)|(IE)]>\r\n      " +
                    "          </td>\r\n                </tr>\r\n                </table>\r\n              " +
                    "  <![endif]-->\r\n            </td>\r\n        </tr>\r\n        <!-- FOOTER -->\r\n     " +
                    "   <tr>\r\n            <td bgcolor=\"#e6e6e6\" align=\"center\" style=\"padding: 0px 10" +
                    "px 0px 10px;\">\r\n                <!--[if (gte mso 9)|(IE)]>\r\n                <tab" +
                    "le align=\"center\" border=\"0\" cellspacing=\"0\" cellpadding=\"0\" width=\"600\">\r\n     " +
                    "           <tr>\r\n                <td align=\"center\" valign=\"top\" width=\"600\">\r\n " +
                    "               <![endif]-->\r\n                <table border=\"0\" cellpadding=\"0\" c" +
                    "ellspacing=\"0\" width=\"100%\" style=\"max-width: 600px;\">\r\n                    \r\n  " +
                    "                  <!-- Web site -->\r\n                    <tr>\r\n                 " +
                    "       <td bgcolor=\"#e6e6e6\" align=\"left\" style=\"padding: 30px 30px 30px 30px; c" +
                    "olor: #666666; font-family: \'Lato\', Helvetica, Arial, sans-serif; font-size: 14p" +
                    "x; font-weight: 400; line-height: 18px;\">\r\n                            <p style=" +
                    "\"margin: 0;\">For more information <a href=\"https://devskill.com\" target=\"_blank\"" +
                    " style=\"color: #111111; font-weight: 700;\">Devskill.com</a>.</p>\r\n              " +
                    "          </td>\r\n                    </tr>\r\n                    <!-- ADDRESS -->" +
                    "\r\n                    <tr>\r\n                        <td bgcolor=\"#e6e6e6\" align=" +
                    "\"left\" style=\"padding: 0px 30px 30px 30px; color: #666666; font-family: \'Lato\', " +
                    "Helvetica, Arial, sans-serif; font-size: 14px; font-weight: 400; line-height: 18" +
                    "px;\">\r\n                            <p style=\"margin: 0;\">House # 184 (8th Floor)" +
                    ", Senpara Parbata, Begum Rokeya Sarani, Mirpur-10, Dhaka 1216, Bangladesh</p>\r\n " +
                    "                       </td>\r\n                    </tr>\r\n                </table" +
                    ">\r\n                <!--[if (gte mso 9)|(IE)]>\r\n                </td>\r\n          " +
                    "      </tr>\r\n                </table>\r\n                <![endif]-->\r\n           " +
                    " </td>\r\n        </tr>\r\n    </table>\r\n\r\n</body>\r\n</html>\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class ProjectInvitationBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
